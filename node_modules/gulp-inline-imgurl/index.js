'use strict';
var gutil = require('gulp-util');
var through = require('through2');
var cheerio = require('cheerio');
var fs = require('fs');
var path = require('path');
var extend = require('extend');

module.exports = function(opts) {

    var defs = extend({
        list: ['src','data-src']
    }, opts || {})

    return through.obj(function(file, enc, callback) {

        if (file.isNull()) {
            this.push(file);
            return callback();
        }

        if (file.isStream()) {
            this.emit('error', new gutil.PluginError('gulp-inline-imgurl', 'Streaming not supported'));
            return callback();
        }

        if (file.isBuffer()) {
            var $ = cheerio.load(String(file.contents));
            var attr;
            var i = 0
            $('img').each(function() {
                for (var i = defs.list.length - 1; i >= 0; i--) {
                    if(defs.list[i]){
                        attr = defs.list[i];
                        break;
                    }
                }
                if (attr && this.attr('baseurl')) {
                    var that = this
                    var ssrc = this.attr('src');
                    var baseurl = this.attr('baseurl')
                    var isdata = ssrc.indexOf("data");
                    if (ssrc != "" && typeof ssrc != 'undefined' && !/^(https|http)?:\/\//.test(ssrc) && isdata !== 0) {
                        ssrc.replace(/([^\w]*)(.*)/, function($0, $1, $2) {
                            for (var i = defs.list.length - 1; i >= 0; i--) {
                                if(defs.list[i]){
                                    that.attr(defs.list[i], baseurl + $2)
                                    that.removeAttr('baseurl')
                                }
                            };
                        })
                    }
                }
            })
            $('[style]').each(function() {
                var regex = /url\(([^\)]+)\)(.*)/g
                if (regex.test(this.css('background')) && this.attr('baseurl')) {
                    var that = this
                    var baseurl = this.attr('baseurl')
                    var value = this.css('background')
                    var matches = value.match(regex)
                    var path
                    matches.forEach(function(curValue) {
                        path = curValue.slice(4).slice(0);
                        if (path[0] == '"' || path[0] == "'") {
                            path = path.slice(1).slice(0);
                        }
                    })
                    path.replace(/([^\w]*)(.*)/, function($0, $1, $2) {
                            that.css('background', 'url(' + baseurl + $2)
                            that.removeAttr('baseurl')
                    })
                }
            })
            var output = $.html();

            file.contents = new Buffer(output);

            return callback(null, file);
        }
    });
};
